/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category Start
 * @category generated
 */
export const StartStruct = new beet.BeetArgsStruct<{ instructionDiscriminator: number }>(
  [['instructionDiscriminator', beet.u8]],
  'StartInstructionArgs',
);
/**
 * Accounts required by the _Start_ instruction
 *
 * @property [_writable_, **signer**] signedWritableAccount signed, writable account description
 * @property [_writable_] writableAccount writable, non signed account description
 * @property [] nonWritableAccount non signed, non writable account description
 * @category Instructions
 * @category Start
 * @category generated
 */
export type StartInstructionAccounts = {
  signedWritableAccount: web3.PublicKey;
  writableAccount: web3.PublicKey;
  nonWritableAccount: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  rent?: web3.PublicKey;
};

export const startInstructionDiscriminator = 2;

/**
 * Creates a _Start_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Start
 * @category generated
 */
export function createStartInstruction(
  accounts: StartInstructionAccounts,
  programId = new web3.PublicKey('migrxZFChTqicHpNa1CAjPcF29Mui2JU2q4Ym7qQUTi'),
) {
  const [data] = StartStruct.serialize({
    instructionDiscriminator: startInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signedWritableAccount,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.writableAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.nonWritableAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
