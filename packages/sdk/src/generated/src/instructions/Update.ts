/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { UpdateArgs, updateArgsBeet } from '../types/UpdateArgs';

/**
 * @category Instructions
 * @category Update
 * @category generated
 */
export type UpdateInstructionArgs = {
  updateArgs: UpdateArgs;
};
/**
 * @category Instructions
 * @category Update
 * @category generated
 */
export const UpdateStruct = new beet.FixableBeetArgsStruct<
  UpdateInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['updateArgs', updateArgsBeet],
  ],
  'UpdateInstructionArgs',
);
/**
 * Accounts required by the _Update_ instruction
 *
 * @property [**signer**] authority The collection authority
 * @property [_writable_] migrationState The migration state account
 * @property [] voteAccount (optional) SPL governance vote account
 * @category Instructions
 * @category Update
 * @category generated
 */
export type UpdateInstructionAccounts = {
  authority: web3.PublicKey;
  migrationState: web3.PublicKey;
  voteAccount?: web3.PublicKey;
};

export const updateInstructionDiscriminator = 2;

/**
 * Creates a _Update_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Update
 * @category generated
 */
export function createUpdateInstruction(
  accounts: UpdateInstructionAccounts,
  args: UpdateInstructionArgs,
  programId = new web3.PublicKey('migrxZFChTqicHpNa1CAjPcF29Mui2JU2q4Ym7qQUTi'),
) {
  const [data] = UpdateStruct.serialize({
    instructionDiscriminator: updateInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.migrationState,
      isWritable: true,
      isSigner: false,
    },
  ];

  if (accounts.voteAccount != null) {
    keys.push({
      pubkey: accounts.voteAccount,
      isWritable: false,
      isSigner: false,
    });
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
